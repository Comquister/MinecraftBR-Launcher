name: Build MinecraftBR Launcher
on:
  push:
    branches: [main]
    paths: ['minecraft.py', '.github/workflows/build.yml']
  workflow_dispatch:
  release:
    types: [published]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: check
        run: |
          changed_files=$(git diff HEAD^ HEAD --name-only)
          if echo "$changed_files" | grep -E "(minecraft\.py|\.github/workflows/build\.yml)"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-changes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessário para pegar todas as tags
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      
      - run: python -m pip install --upgrade pip && pip install pyinstaller psutil requests flask PyQt6 portablemc

      # Gerar informações de versão baseadas no Git
      - name: Generate version info
        id: version
        shell: bash
        run: |
          # Pegar informações do Git
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_YEAR=$(date +'%Y')
          
          # Criar versão no formato Major.Minor.Build.Revision
          MAJOR=1
          MINOR=0
          BUILD=$COMMIT_COUNT
          # Usar timestamp Unix truncado para evitar problemas com zeros à esquerda
          REVISION=$(($(date +%s) % 10000))  # Últimos 4 dígitos do timestamp
          VERSION="$MAJOR.$MINOR.$BUILD.$REVISION"
          
          # Versão para PyInstaller (deve ser inteiros separados por vírgulas)
          VERSION_TUPLE="$MAJOR,$MINOR,$BUILD,$REVISION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tuple=$VERSION_TUPLE" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "build_year=$BUILD_YEAR" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          echo "Generated version: $VERSION (commit: $COMMIT_SHORT)"

      # Criar version_info.txt dinamicamente (apenas Windows)
      - name: Create version file (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cat > version_info.txt << 'EOF'
          # UTF-8
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=(${{ steps.version.outputs.version_tuple }}),
              prodvers=(${{ steps.version.outputs.version_tuple }}),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                StringTable(
                  u'040904B0',
                  [StringStruct(u'CompanyName', u'MinecraftBR Project'),
                  StringStruct(u'FileDescription', u'MinecraftBR Launcher - Launcher personalizado para Minecraft'),
                  StringStruct(u'FileVersion', u'${{ steps.version.outputs.version }}'),
                  StringStruct(u'InternalName', u'MinecraftBr'),
                  StringStruct(u'LegalCopyright', u'Copyright © ${{ steps.version.outputs.build_year }} MinecraftBR Project. Todos os direitos reservados.'),
                  StringStruct(u'OriginalFilename', u'MinecraftBr.exe'),
                  StringStruct(u'ProductName', u'MinecraftBR Launcher'),
                  StringStruct(u'ProductVersion', u'${{ steps.version.outputs.version }}'),
                  StringStruct(u'LegalTrademarks', u'MinecraftBR™'),
                  StringStruct(u'Comments', u'Build: ${{ steps.version.outputs.commit }} | Data: ${{ steps.version.outputs.build_date }} | Commits: ${{ steps.version.outputs.commit_count }}')])
                ]), 
              VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
            ]
          )
          EOF
          
          echo "Version file created with version ${{ steps.version.outputs.version }}"

      # Build para Windows com version file
      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: pyinstaller --noconfirm --onefile --windowed --icon "image/favicon.ico" --version-file "version_info.txt" --name "MinecraftBr-v${{ steps.version.outputs.version }}" --distpath "dist" --workpath "build" minecraft.py
      
      # Build para Linux sem version file
      - name: Build Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: pyinstaller --noconfirm --onefile --windowed --icon "image/favicon.ico" --name "MinecraftBr-v${{ steps.version.outputs.version }}" --distpath "dist" --workpath "build" minecraft.py

      # Criar arquivo de informações da build
      - name: Create build info
        shell: bash
        run: |
          cat > dist/build-info.txt << EOF
          MinecraftBR Launcher - Build Information
          =======================================
          Version: ${{ steps.version.outputs.version }}
          Commit: ${{ steps.version.outputs.commit }}
          Build Date: ${{ steps.version.outputs.build_date }}
          Total Commits: ${{ steps.version.outputs.commit_count }}
          Platform: ${{ matrix.os }}
          Python Version: 3.8
          
          Built automatically with GitHub Actions
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: MinecraftBR-${{ matrix.os }}-v${{ steps.version.outputs.version }}
          path: dist/*

  create-release:
    needs: [check-changes, build]
    if: needs.check-changes.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Gerar mesma versão que o build
      - name: Generate release version
        id: version
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          MAJOR=1
          MINOR=0
          BUILD=$COMMIT_COUNT
          REVISION=$(date +'%m%d')
          VERSION="$MAJOR.$MINOR.$BUILD.$REVISION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: MinecraftBR Launcher v${{ steps.version.outputs.version }}
          body: |
            ## MinecraftBR Launcher v${{ steps.version.outputs.version }}
            
            **Informações da Build:**
            - 🏷️ Versão: `${{ steps.version.outputs.version }}`
            - 🔗 Commit: `${{ steps.version.outputs.commit }}`
            - 📅 Data: `${{ github.event.head_commit.timestamp }}`
            - 👤 Autor: `${{ github.event.head_commit.author.name }}`
            
            **Downloads disponíveis:**
            - Windows: `MinecraftBr-v${{ steps.version.outputs.version }}.exe`
            - Linux: `MinecraftBr-v${{ steps.version.outputs.version }}`
            
            **Changelog:**
            ${{ github.event.head_commit.message }}
          files: |
            MinecraftBR-windows-latest-v${{ steps.version.outputs.version }}/*
            MinecraftBR-ubuntu-latest-v${{ steps.version.outputs.version }}/*
          generate_release_notes: false
          draft: false
          prerelease: false