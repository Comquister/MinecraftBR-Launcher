name: Build MinecraftBR Launcher
on:
  push:
    branches: [main]
    paths: ['minecraft.py', '.github/workflows/build.yml']
  workflow_dispatch:
  release:
    types: [published]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: check
        run: |
          changed_files=$(git diff HEAD^ HEAD --name-only)
          if echo "$changed_files" | grep -E "(minecraft\.py|\.github/workflows/build\.yml)"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-changes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessário para pegar todas as tags
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      
      - run: python -m pip install --upgrade pip && pip install pyinstaller psutil requests flask PyQt6 portablemc

      # Gerar informações de versão baseadas no Git
      - name: Generate version info
        id: version
        shell: bash
        run: |
          # Pegar informações do Git
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_YEAR=$(date +'%Y')
          
          # Criar versão no formato Major.Minor.Build.Revision
          MAJOR=1
          MINOR=0
          BUILD=$COMMIT_COUNT
          # Usar timestamp Unix truncado para evitar problemas com zeros à esquerda
          REVISION=$(($(date +%s) % 10000))  # Últimos 4 dígitos do timestamp
          VERSION="$MAJOR.$MINOR.$BUILD.$REVISION"
          
          # Versão para PyInstaller (deve ser inteiros separados por vírgulas)
          VERSION_TUPLE="$MAJOR,$MINOR,$BUILD,$REVISION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tuple=$VERSION_TUPLE" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "build_year=$BUILD_YEAR" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          echo "Generated version: $VERSION (commit: $COMMIT_SHORT)"

      # Criar version_info.txt dinamicamente (apenas Windows)
      - name: Create version file (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cat > version_info.txt << 'EOF'
          # UTF-8
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=(${{ steps.version.outputs.version_tuple }}),
              prodvers=(${{ steps.version.outputs.version_tuple }}),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                StringTable(
                  u'040904B0',
                  [StringStruct(u'CompanyName', u'MinecraftBR Development Team'),
                  StringStruct(u'FileDescription', u'MinecraftBR Launcher - Launcher personalizado para Minecraft'),
                  StringStruct(u'FileVersion', u'${{ steps.version.outputs.version }}'),
                  StringStruct(u'InternalName', u'MinecraftBr'),
                  StringStruct(u'LegalCopyright', u'Copyright © ${{ steps.version.outputs.build_year }} MinecraftBR Project. Todos os direitos reservados.'),
                  StringStruct(u'OriginalFilename', u'MinecraftBr.exe'),
                  StringStruct(u'ProductName', u'MinecraftBR Launcher'),
                  StringStruct(u'ProductVersion', u'${{ steps.version.outputs.version }}'),
                  StringStruct(u'LegalTrademarks', u'MinecraftBR™'),
                  StringStruct(u'PrivateBuild', u'Official Release'),
                  StringStruct(u'SpecialBuild', u'GitHub Actions Build'),
                  StringStruct(u'Comments', u'Build: ${{ steps.version.outputs.commit }} | Data: ${{ steps.version.outputs.build_date }} | Commits: ${{ steps.version.outputs.commit_count }}')])
                ]), 
              VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
            ]
          )
          EOF
          
          echo "Version file created with version ${{ steps.version.outputs.version }}"

      # Build para Windows
      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --noconfirm --onefile --windowed ^
            --icon "image/favicon.ico" ^
            --version-file "version_info.txt" ^
            --name "MinecraftBr" ^
            --distpath "dist" ^
            --workpath "build" ^
            --add-data "README.md;." ^
            --add-data ".github/workflows/build.yml;.github/workflows" ^
            --hidden-import "win32timezone" ^
            --hidden-import "PyQt6.QtCore" ^
            --hidden-import "PyQt6.QtGui" ^
            --hidden-import "PyQt6.QtWidgets" ^
            --collect-submodules "requests" ^
            --collect-submodules "urllib3" ^
            --exclude-module "tkinter" ^
            --exclude-module "matplotlib" ^
            --exclude-module "numpy" ^
            --uac-admin ^
            minecraft.py
        shell: cmd
      
      # Build para Linux
      - name: Build Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --noconfirm --onefile --windowed \
            --icon "image/favicon.ico" \
            --name "MinecraftBr" \
            --distpath "dist" \
            --workpath "build" \
            --add-data "README.md:." \
            --add-data ".github/workflows/build.yml:.github/workflows" \
            --hidden-import "PyQt6.QtCore" \
            --hidden-import "PyQt6.QtGui" \
            --hidden-import "PyQt6.QtWidgets" \
            --collect-submodules "requests" \
            --collect-submodules "urllib3" \
            --exclude-module "tkinter" \
            --exclude-module "matplotlib" \
            --exclude-module "numpy" \
            minecraft.py

      # Enviar para VirusTotal
      - name: Submit to VirusTotal
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: dist/MinecraftBr.exe
          request_rate: 4
        continue-on-error: true

      # Calcular hashes de segurança
      - name: Calculate file hashes
        shell: bash
        run: |
          cd dist
          if [ -f "MinecraftBr.exe" ]; then
            echo "=== Windows Executable Hashes ===" > hashes.txt
            echo "File: MinecraftBr.exe" >> hashes.txt
            echo "MD5: $(md5sum MinecraftBr.exe | cut -d' ' -f1)" >> hashes.txt
            echo "SHA1: $(sha1sum MinecraftBr.exe | cut -d' ' -f1)" >> hashes.txt
            echo "SHA256: $(sha256sum MinecraftBr.exe | cut -d' ' -f1)" >> hashes.txt
            echo "SHA512: $(sha512sum MinecraftBr.exe | cut -d' ' -f1)" >> hashes.txt
          fi
          
          if [ -f "MinecraftBr" ]; then
            echo "" >> hashes.txt
            echo "=== Linux Executable Hashes ===" >> hashes.txt
            echo "File: MinecraftBr" >> hashes.txt
            echo "MD5: $(md5sum MinecraftBr | cut -d' ' -f1)" >> hashes.txt
            echo "SHA1: $(sha1sum MinecraftBr | cut -d' ' -f1)" >> hashes.txt
            echo "SHA256: $(sha256sum MinecraftBr | cut -d' ' -f1)" >> hashes.txt
            echo "SHA512: $(sha512sum MinecraftBr | cut -d' ' -f1)" >> hashes.txt
          fi
          
          echo "Build Information:" >> hashes.txt
          echo "Version: ${{ steps.version.outputs.version }}" >> hashes.txt
          echo "Commit: ${{ steps.version.outputs.commit }}" >> hashes.txt
          echo "Build Date: ${{ steps.version.outputs.build_date }}" >> hashes.txt
          echo "Repository: ${{ github.repository }}" >> hashes.txt
          echo "Workflow: ${{ github.workflow }}" >> hashes.txt
          
          cat hashes.txt

      - uses: actions/upload-artifact@v4
        with:
          name: MinecraftBR-${{ matrix.os }}
          path: dist/*

  create-release:
    needs: [check-changes, build]
    if: needs.check-changes.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Gerar mesma versão que o build
      - name: Generate release version
        id: version
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          MAJOR=1
          MINOR=0
          BUILD=$COMMIT_COUNT
          REVISION=$(date +'%m%d')
          VERSION="$MAJOR.$MINOR.$BUILD.$REVISION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: List downloaded artifacts
        run: find artifacts/ -type f -name "*" | head -20
      
      # Consolidar hashes de segurança
      - name: Consolidate security hashes
        run: |
          echo "# MinecraftBR Launcher v${{ steps.version.outputs.version }} - Security Hashes" > SECURITY_HASHES.md
          echo "" >> SECURITY_HASHES.md
          echo "## File Verification" >> SECURITY_HASHES.md
          echo "" >> SECURITY_HASHES.md
          
          if [ -f "artifacts/MinecraftBR-windows-latest/hashes.txt" ]; then
            cat artifacts/MinecraftBR-windows-latest/hashes.txt >> SECURITY_HASHES.md
          fi
          
          if [ -f "artifacts/MinecraftBR-ubuntu-latest/hashes.txt" ]; then
            cat artifacts/MinecraftBR-ubuntu-latest/hashes.txt >> SECURITY_HASHES.md
          fi
          
          echo "" >> SECURITY_HASHES.md
          echo "## Security Information" >> SECURITY_HASHES.md
          echo "- ✅ **Open Source**: Full source code available at [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})" >> SECURITY_HASHES.md
          echo "- ✅ **Automated Build**: Built automatically with GitHub Actions" >> SECURITY_HASHES.md
          echo "- ✅ **Reproducible**: Anyone can rebuild from source" >> SECURITY_HASHES.md
          echo "- ✅ **No Obfuscation**: Clear Python source code" >> SECURITY_HASHES.md
          echo "- ✅ **Dependency Tracking**: All dependencies listed in workflow" >> SECURITY_HASHES.md
          echo "- ⚠️ **Unsigned**: Executables are not code signed" >> SECURITY_HASHES.md
          
          echo "" >> SECURITY_HASHES.md
          echo "## Windows SmartScreen Bypass" >> SECURITY_HASHES.md
          echo "If Windows blocks the executable:" >> SECURITY_HASHES.md
          echo "1. Click **'More info'** on the SmartScreen warning" >> SECURITY_HASHES.md
          echo "2. Click **'Run anyway'**" >> SECURITY_HASHES.md
          echo "3. The application is safe - it's just not recognized by Microsoft yet" >> SECURITY_HASHES.md
          echo "" >> SECURITY_HASHES.md
          echo "**Why this happens:** New executables need to build reputation with Microsoft's systems." >> SECURITY_HASHES.md
          
          cat SECURITY_HASHES.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: MinecraftBR Launcher v${{ steps.version.outputs.version }}
          body: |
            ## MinecraftBR Launcher v${{ steps.version.outputs.version }}
            
            **Build Information:**
            - 🏷️ Versão: `${{ steps.version.outputs.version }}`
            - 🔗 Commit: [`${{ steps.version.outputs.commit }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - 📅 Data: `${{ github.event.head_commit.timestamp }}`
            - 👤 Autor: `${{ github.event.head_commit.author.name }}`
            
            **Changelog:**
            ${{ github.event.head_commit.message }}
          files: |
            artifacts/**/*
            SECURITY_HASHES.md
          generate_release_notes: false
          draft: false
          prerelease: false